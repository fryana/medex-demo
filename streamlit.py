# -*- coding: utf-8 -*-
"""Streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e_goiA1a0JXi97KzA1ZfB2NP2aLk-XWW
"""

import streamlit as st
import google.generativeai as genai
import base64
from PIL import Image
import io

# Set up Google AI Studio API Key
API_KEY = "AIzaSyCtuCi_7qoxwNC-Em5WG7iKdMXp48oqkNY"  # 🔹 Replace with your Google AI API Key
genai.configure(api_key=API_KEY)

# Streamlit UI Title
st.title("🩺 AI-Powered Radiology Report Generator")
st.write("📷 Upload a medical image, and AI will generate a detailed radiology report.")

# Upload Image
uploaded_file = st.file_uploader("📂 Choose a medical image...", type=["png", "jpg", "jpeg"])

def upload_to_gemini(path, mime_type=None):
    file = genai.upload_file(path, mime_type=mime_type)
    return file

# Function to encode image to base64 for AI processing
def encode_image(image):
    image_bytes = io.BytesIO()
    image.save(image_bytes, format="PNG")
    return base64.b64encode(image_bytes.getvalue()).decode("utf-8")

if uploaded_file is not None:
    # Display the uploaded image
    image = Image.open(uploaded_file)
    st.image(image, caption="📸 Uploaded Medical Image", use_column_width=True)

    # # Convert image to base64
    # image_base64 = encode_image(image)

    # Button to generate AI report
    if st.button("📝 Generate Radiology Report"):
        st.write("⏳ Processing... Please wait.")
        
        try:
            # Save file temporarily
            temp_path = os.path.join("temp_uploaded_file.png")  # Change extension accordingly
        
            with open(temp_path, "wb") as f:
                f.write(uploaded_file.getbuffer())
            
            # # Send request to Google Gemini AI
            # model = genai.GenerativeModel("gemini-pro-vision")
            # response = model.generate_content(
            #     ["Analyze this medical image and generate a detailed radiology report."],
            #     [image_base64]
            # )

            # # Extract AI-generated report
            # ai_report = response.text if response else "⚠️ No report generated."

            # # Display the AI Report
            # st.subheader("📑 AI-Generated Radiology Report:")
            # st.write(ai_report)

        except Exception as e:
            st.error(f"❌ Error: {e}")

